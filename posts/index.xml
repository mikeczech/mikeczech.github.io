<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on MLOops.dev</title>
    <link>https://mloops.dev/posts/</link>
    <description>Recent content in Posts on MLOops.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 13 Sep 2020 12:06:21 +0200</lastBuildDate><atom:link href="https://mloops.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Setting up a Private PyPI Repository on the Google Cloud Platform</title>
      <link>https://mloops.dev/posts/private-python-repo/</link>
      <pubDate>Sun, 13 Sep 2020 12:06:21 +0200</pubDate>
      
      <guid>https://mloops.dev/posts/private-python-repo/</guid>
      <description>Update 14/03/21: Google recently announced that the Artifact Registry now supports PyPI repositories as well (alpha). I haven&amp;rsquo;t had the time to test it myself yet, but it definitely looks promising. Thus, please consider to use the Artifact Registry instead.
Every once in a while I am trying to solve a problem that is seemingly so fundamental that there must exist an off-the-shelf solution already. Setting up a private repository for Python packages on the Google Cloud Platform (GCP) falls into this category.</description>
    </item>
    
    <item>
      <title>Five Lessons from Two Years of ML Engineering</title>
      <link>https://mloops.dev/posts/ml-engineering-five-lessons/</link>
      <pubDate>Sat, 18 Apr 2020 21:48:24 +0200</pubDate>
      
      <guid>https://mloops.dev/posts/ml-engineering-five-lessons/</guid>
      <description>Today, an increasing number of companies understand that data science isnâ€™t just about presenting insights from data analysis to decision makers, but about building data science applications such as recommendation systems or spam filters. Thus, data science teams often not only consist of data scientists, but also of machine learning engineers who bridge the gap between data science and software engineering.
Here, I want to share five lessons I&amp;rsquo;ve learned in the past two years working as a machine learning engineer on a variety of products.</description>
    </item>
    
    <item>
      <title>Why is my Cluster not Scaling Down?</title>
      <link>https://mloops.dev/posts/reliable-gke-autoscaling/</link>
      <pubDate>Sat, 06 Apr 2019 14:54:46 +0200</pubDate>
      
      <guid>https://mloops.dev/posts/reliable-gke-autoscaling/</guid>
      <description>In my team, we regularly run batch jobs with very specific hardware requirements. A typical example is model training which usually requires (multiple) GPUs to finish within a reasonable amount of time. To run such jobs, we use the Google Kubernetes Engine (GKE) which is a managed service on the Google Cloud Platform (GCP). The workflow is to submit a job and let Kubernetes allocate the required resources, run the job, and finally deallocate the acquired resources to avoid unnecessary costs.</description>
    </item>
    
    <item>
      <title>Thoughts on Pair Programming as the Default</title>
      <link>https://mloops.dev/posts/pair-programming/</link>
      <pubDate>Sat, 01 Sep 2018 13:49:41 +0200</pubDate>
      
      <guid>https://mloops.dev/posts/pair-programming/</guid>
      <description>Pair programming! Apparently, there is no other agile practice that divides the dev community as this one. On one side, there are the evangelists who advocate full-time pair programming as the only means to write high-quality software. There also exist companies like Pivotal that have made this view an integral part of their culture. On the other side, there are developers who insist to work quietly on their own.
Developer misconception #1: I do my best work with headphones on</description>
    </item>
    
    <item>
      <title>Concolic Testing With KLEE</title>
      <link>https://mloops.dev/posts/klee/</link>
      <pubDate>Thu, 07 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://mloops.dev/posts/klee/</guid>
      <description>In this blog post, I&amp;rsquo;d like to introduce an automatic way to test a program. Software testing isn&amp;rsquo;t a trivial task though and it&amp;rsquo;s quite unlikely that it can be automated entirely (at least in the near future). Nevertheless, there is an interesting technique called Concolic Testing which can do this to some degree.
What is Concolic Testing? Concolic Testing combines concrete and symbolic execution for generating test-case suites where &amp;ldquo;Concolic&amp;rdquo; is a portmanteau word consisting of the words &amp;ldquo;Concrete&amp;rdquo; and &amp;ldquo;Symbolic&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>
